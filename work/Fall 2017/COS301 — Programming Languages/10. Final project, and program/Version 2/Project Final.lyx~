#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass extarticle
\begin_preamble
\usepackage{indentfirst}
\setmonofont[
  Contextuals={Alternate}
]{Fira Code}
\usepackage{hyperref}
\usepackage{url}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman Computer Modern
\font_sans Linux Biolinum O
\font_typewriter Fira Code
\font_math auto
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf true
\font_sf_scale 70
\font_tt_scale 70
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize 14
\spacing other 1.5
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\texttt},columns=fullflexible,keepspaces=true,literate={-->}{\texttt{-->}}{1} {->}{\texttt{->}}{1} {==>}{\texttt{==>}}{1} {=>}{\texttt{=>}}{1}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Perl 6: Project
\end_layout

\begin_layout Author
Elliot Chandler (Wallace)
\end_layout

\begin_layout Date
11 December 2017
\end_layout

\begin_layout Abstract
This article introduces and summarizes the Perl 6 programming language and
 some of its various features and capabilities, as well as discussing its
 applications, effective uses, popularity, prospects, and limitations.
\end_layout

\begin_layout Part*
Part 1
\end_layout

\begin_layout Standard
My first choice of language is Perl 6.
\end_layout

\begin_layout Standard
My second choice of language is COBOL.
\end_layout

\begin_layout Standard
Perl 6 is my first choice of language for two main reasons.
 First, Perl 6 has strong built-in support for implementing other languages,
 and I would like to learn to use this: I would like to implement a document
 format that I have been developing, and I think that knowing Perl 6 Grammars
 could help me with that.
 While Perl 6 reportedly has issues with performance, and may not be an
 appropriate long-term choice for implementing the format, it seems like
 it would be excellent for rapid prototyping and iterative development of
 the format.
 Second, Perl 6 has a number of features that I have heard about, that seem
 to have a lot of "buzz", and that seem to have wide applicability and popular
 use, but that I don't have any significant experience with or understanding
 of the use of: multiple dispatch, promises, asynchronous I/O, polymorphism,
 functional programming, introspection, generic programming, meta-object
 programming, and macros.
 Because that would be a lot of things to learn in only a semester, I would
 presumably select a few areas to focus on.
\end_layout

\begin_layout Standard
My second language choice is COBOL, because it has a long history of being
 very capable for data processing work and file handling, and a lot of businesse
s seem to use it successfully.
 Because of that history of success with it, I think that it would be good
 to have experience with.
 (While C and Java have similar histories of successful use, I do not propose
 studying them as I have used them briefly.) I am also interested in learning
 about COBOL because, as a file processing and business language, it is
 quite different from the languages I have experience using.
 (Perl 6 is also quite different, because of its capacity for functional
 programming.)
\end_layout

\begin_layout Standard
For reference, the languages with which I have the most confidence and experienc
e in are, in roughly descending order:
\end_layout

\begin_layout Itemize
Bash (along with PHP, which is a reasonably close second, I have by far
 the most confidence and experience in Bash, and generally find it enjoyable
 to use)
\end_layout

\begin_layout Itemize
PHP 5 (I used it a lot until I switched to writing most things in Bash)
\end_layout

\begin_layout Itemize
C (don't have a lot of experience with it, only having written small patches,
 but I've appreciated the readability of it in working with othersâ€™ code)
\end_layout

\begin_layout Itemize
Python (All the apps I wrote in Python that I still use I have since re-written
 in Bash, and found it much more appropriate for them)
\end_layout

\begin_layout Itemize
C# (mostly from doing game programming in Unity using Microsoft Visual Studio
 for a class)
\end_layout

\begin_layout Itemize
Perl (used it for one tiny project about eight years ago, but don't remember
 anything about it really)
\end_layout

\begin_layout Itemize
Java (I don't really get it, and found it frustrating when I tried it)
\end_layout

\begin_layout Itemize
C++ (poked around briefly trying to patch a couple of apps in it, no real
 understanding)
\end_layout

\begin_layout Part*
Part 2
\end_layout

\begin_layout Standard
Perl 6 is a programming language first released at the end of 2015.
 It was originally conceived as a revision of the Perl programming language,
 but because it evolved during the course of its development (begun in 2000),
 it was split from the older language, which will continue to be maintained
 separately.
 It uses a specification and test-suite driven language development process,
 rather than an implementation-driven process.
 Consequently, there is not a single official implementation, although the
 Rakudo implementation is currently the most complete implementation available,
 and is the only implementation that is currently available.
\end_layout

\begin_layout Standard
Perl 6 is a general purpose language that by default for modules is just-in-time
 compiled to bytecode, and for scripts is interpreted, although this can
 be changed.
 The language is implemented using a subset language called NQP, which is
 run by a virtual machine.
 There are a few virtual machine implementations available, including a
 native one, one running on the Java Virtual Machine, and one for JavaScript.
 The native one, 
\begin_inset Quotes eld
\end_inset

MoarVM
\begin_inset Quotes erd
\end_inset

, is the most complete of these, in that it has support for the most language
 features of the various implementations.
 
\begin_inset CommandInset citation
LatexCommand citep
key "project"

\end_inset

 Perl 6 has many complex and capable programming constructs included with
 it.
 Because of this, it seems quite capable to me.
 The main detriment compared to other programming languages in general that
 it seems very module-centric, and that it is fairly a new language, and
 consequently that it does not have a substantial amount of documentation
 available for it.
 Another issue that bothers me specifically, is that it lacks strong facilities
 out of the box for use as a shell REPL environment and shell-style use
 for executing external shell commands and manipulating their output, although
 this is a problem shared by many languages that are not purpose-built as
 shell languages.
\end_layout

\begin_layout Standard
Perl 6 is a module-centric language, including its own package management
 and package repository.
 One problem caused by it being a module-centric language, exacerbated by
 it being a new language, is that packages for it are not available easily
 as native packages.
 This is also a common issue with languages that come with their own package
 managers, such as .NET's NuGet, Node.js's npm, and Python's pip.
 There are several other issues caused by languages using their own package
 managers, as well.
 Another major consequence of this is that there is no significant pressure
 on package maintainers to keep their packages up to date and interoperable,
 because any given app only needs to work with one version of each package
 on which it depends.
 That system, however, breaks down when an app depends on two packages,
 each of which depend on a conflicting version of the same package, and
 one wants to avoid having outdated versions of the packages installed on
 one's system: the standard model of an elegant one-minor-version-per-package
 used by system package managers is broken, and rendered unable to ship
 the app properly.
\end_layout

\begin_layout Standard
While being a new language could conceivably be a problem because of a lack
 of available libraries for a language, this problem is avoided by Perl
 6 by including a system for interacting with 
\begin_inset Quotes eld
\end_inset

C, Python, Perl 5, and Ruby
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
after "p. 2"
key "Lenz2017"

\end_inset

.
 Perl 6 contains a wide range of capabilities and features.
 The feature that interested me the most is grammars.
 That is what made me choose to pursue learning about the language.
 Perl 6's grammars allow writing code that parses a language and returns
 an abstract syntax tree without having to manually write the parser: rather,
 one can write a set of rules that combine to express the syntax of the
 language.
 This provides a powerful facility for being able to handle problems of
 implementing languages and document formats, and consequently is something
 that interests me, as I have a document format that I would like to implement.
 The rules in Perl 6 are created using 
\emph on
patterns
\emph default
, which are somewhat similar to regular expressions in other languages,
 and generally take their place in Perl 6, although Perl 5â€“style regular
 expressions are still available in Perl 6 in case they are needed.
\end_layout

\begin_layout Standard
In addition to these abilities, Perl 6 has many other features, as well,
 that contribute to it being effective and capable at solving a variety
 of other problems: rather than focusing exclusively on one problem domain
 at the expense of facility in others, it is a general-purpose language
 that provides a range of tools that can be used, combined, and adapted
 for various applications.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

 Its mascot is a butterfly named Camelia 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
 It integrates several techniques different from the way Perl works, such
 as using lazy evaluation.
 This creates some changes in the way the language operates compared to
 Perl, and consequently it is somewhat different, with some language constructs
 not being available in Perl 6, thus necessitating working around their
 absence.
 For example, the 
\family typewriter
wantsarray
\family default
 construct from Perl is apparently not available in Perl 6, according to
 the language FAQ 
\begin_inset CommandInset citation
LatexCommand citep
key "P6FAQ"

\end_inset

.
 My lack of familiarity with Perl prevents my assessing thoroughly the extent
 of a problem that this causes.
 Perl 6 uses (limited-precision 
\begin_inset CommandInset citation
LatexCommand citep
key "News"

\end_inset

) rational numbers by default, rather than floating point, so that decimals
 will follow the traditional rules of arithmetic rather than the slightly
 strange behavior of floating-point numbers (floating-point numbers will
 produce unexpected results in some cases when doing arithmetic on them
 
\begin_inset CommandInset citation
LatexCommand citep
key "Overflow"

\end_inset

), but at the cost of performance.
 Floating-point numbers can be used if they are desired, though.
\end_layout

\begin_layout Standard
Perl 6 
\emph on
grammars
\emph default
 are an extremely expressive tool for writing parsers for languages and
 document formats.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

 They are a way to specify the syntax of a language in such a way that given
 a grammar and a string to parse using it, the Perl 6 language can build
 an abstract syntax tree that can be used by code generators for compiling
 a language, or by other tools that can work with abstract syntax trees.
 A grammar is a set of patterns (which can be named, and reference each
 other) using which the input string is parsed.
 A Perl 6 grammar is a class, so it can be used as other classes.
 To allow better expressivity from grammars, 
\emph on
actions
\emph default
 are available (a type of class that allows the parse process to call its
 methods).
 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation_2"

\end_inset

 This allows hooking into the parse process with other code, to allow a
 wide range of uses outside the traditional scope of grammars.
\end_layout

\begin_layout Standard
Perl 6 seems to have good prospects ahead of it, being a new language.
 Now that it has been released, it will presumably see extensive testing,
 and consequent development, due to its being in more widespread use.
 In summary, it is a capable and flexible general-purpose language that,
 while being new and having some rough edges, is quite capable and useful.
\end_layout

\begin_layout Part*
Part 3
\end_layout

\begin_layout Subsubsection*
Basic syntactic structure, including statement terminators or separators,
 block structure, syntactic peculiarities, etc.
\end_layout

\begin_layout Standard
In Perl 6, blocks are typically denoted by braces (
\family typewriter
{
\family default
, 
\family typewriter
}
\family default
) and can be nested.
 Statements are delimited by semicolons (
\family typewriter
;
\family default
), but the semicolons can be omitted in some circumstances, when the end
 of a statement is unambiguous.
 A block can be preceded by 
\family typewriter
-â€Œ>
\family default
, with an interceding list of variables, called a 
\emph on
pointy block
\emph default
, which acts similarly to an anonymous function.
 Parentheses can be used to denote semantic divisions within a given block.
 Perl 6 has five types of variables, denoted by one of four indicators called
 
\emph on
sigils
\emph default
, or by the absence of a sigil; these determine the default type of the
 variable, affect how assignment to the variable takes place, and possibly
 introduce a type constraint on the variable 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
The units or levels of scope and the nature and type (runtime or compile-time)
 of name bindings within the different levels of scope.
\end_layout

\begin_layout Standard
By default, the scope of variables in Perl 6 is determined by the 
\emph on
declarator
\emph default
 with which the variable was declared (most commonly 
\family typewriter
my
\family default
).
 Perl 6 uses a variety of modifiers, called 
\emph on
twigils
\emph default
, to alter the default scoping 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
 There are seven declarators and two declarator-style prefixes, and there
 are nine twigils (not counting the absence of a twigil) 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection*
Primitive data types available, including range limitations or lack thereof.
\end_layout

\begin_layout Standard
Of the 260 built-in types in Perl 6, 47 of them are primitive types.
 All types are subtypes of 
\family typewriter
Mu
\family default
 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
 Things that can be numbers are subtypes of 
\family typewriter
Numeric
\family default
.
 Common number types are 
\family typewriter
Int
\family default
, 
\family typewriter
Num
\family default
, and 
\family typewriter
Rat
\family default
.
 
\family typewriter
Int
\family default
s do not restrict the range of values they can hold, beyond only accepting
 integers.
 
\family typewriter
Num
\family default
s usually hold either 
\begin_inset Quotes eld
\end_inset

an IEEE 754 64-bit floating point
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

 value, 
\family typewriter
Inf
\family default
 (infinity, or a number too large to store in a 
\family typewriter
Num
\family default
), or 
\family typewriter
NaN
\family default
 (not a number).
 
\family typewriter
Rat
\family default
s are rational numbers, so they do not accumulate errors like floating-point
 numbers (in Perl 6, 
\family typewriter
Num
\family default
s) do.
 Their denominators are limited to 64 bits.
 If one desires a 
\family typewriter
Rat
\family default
 that does not have a restriction on the values of its numerator and denominator
, a 
\family typewriter
FatRat
\family default
 can be used instead.
 In addition, the 
\family typewriter
Real
\family default
 and 
\family typewriter
Complex
\family default
 types are available.
 A 
\family typewriter
Real
\family default
 can be created from the non-imaginary numeric types, and a 
\family typewriter
Complex
\family default
 can be created from two 
\family typewriter
Real
\family default
s representing the number's real and imaginary parts 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection*
Operators for primitive data types and their precedence and associativity.
\end_layout

\begin_layout Standard
Perl 6 has twenty-seven levels of precedence.
 All operators can be written as subroutines 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
 Custom operators are allowed, and can have their precedence specified relative
 to the built-in operators.
 Most operators can be overloaded.
 There are three types of associativity for unary operators: left-associative,
 right-associative, and non-associative.
 Binary operators add to these three chain-associative and list-associative.
 The position of operators relative to their operand(s) has five categories:
 prefix (preceding the operand), infix (between two operands), postfix (succedin
g the operand), circumfix (surrounding the operand â€” `bracketing' operators),
 and postcircumfix (bracketing the second of two operands).
 These five categories, combined with the operator, can be written as subroutine
s, as in this example from the documentation: 
\family typewriter
circumfix:Â«[ ]Â»(<a b c>)
\family default
, being equivalent to 
\family typewriter
[<a b c>]
\family default
.
 Some operators can be created by combining other operators together, such
 as type coersion and assignment (
\family typewriter
~
\family default
 coerces to a string, and 
\family typewriter
=
\family default
 assigns; combined, 
\family typewriter
~=
\family default
 coerces the right operand to a string and assigns it to the left operand).
 There are also the 
\family typewriter
s///
\family default
 and 
\family typewriter
S///
\family default
 substitution operators, but the documentation is, as far as I could tell,
 unclear on which of the above types of operator they fall into, and does
 not state clearly whether the regular rules that apply to operators apply
 to them.
\end_layout

\begin_layout Part*
Part 4
\end_layout

\begin_layout Subsubsection*
1.
 Data types
\end_layout

\begin_layout Standard
Perl 6 includes a large amount of non-primitive types in the language itself:
 33 compound types, 56 
\begin_inset Quotes eld
\end_inset

domain-specific
\begin_inset Quotes erd
\end_inset

 types, and 113 exception types.
 This includes common compound types such as arrays, lists, and hashes,
 as well as various other types for a range of applications, such as for
 documentation, concurrent programming, and I/O for various operating systems.
 Perl 6 includes a large amount of capabilities within the language core
 itself.
 That allows the base language installation to be quite functional.
 It means that it is not necessary to install as many additional libraries
 to have a practical base of tools 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
2.
 Standard library
\end_layout

\begin_layout Standard
Perl 6 does not itself have a specified standard library 
\emph on
per se
\emph default
, but the Rakudo Star distribution (the primary way to obtain an implementation
 of the language) does include a variety of additional 
\emph on
modules
\emph default
 (46 of them) 
\begin_inset CommandInset citation
LatexCommand citet
key "New1"

\end_inset

.
 Rakudo Star includes tools for performance debugging and profiling, such
 as 
\family typewriter
debugger-ui-commandline
\family default
, 
\family typewriter
grammar-debugger
\family default
 and 
\family typewriter
Grammar-Profiler-Simple
\family default
.
 It provides the 
\family typewriter
Terminal-ANSIColor
\family default
 module for creating colored output from command-line programs, and 
\family typewriter
test-mock
\family default
 and 
\family typewriter
Test-META
\family default
 for creating unit tests.
 Rakudo Star provides tools for data interchange and serialization, in the
 form of seven modules for working with JSON, and one for XML, as well as
 a database interface module (
\family typewriter
DBIlish
\family default
).
 For graphics, Rakudo Star comes with the 
\family typewriter
svg
\family default
 and 
\family typewriter
svg-plot
\family default
 modules.
 It also includes several such as 
\family typewriter
perl6-http-easy
\family default
 and 
\family typewriter
perl6-http-status
\family default
 for network interoperation.
 Perl 6 includes a package manager module, also, called 
\family typewriter
zef
\family default
, which provides a command-line interface for managing the packages installed
 in a system 
\begin_inset CommandInset citation
LatexCommand cite
key "New1"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
3.
 Semantics of expression evaluation
\end_layout

\begin_layout Standard
Perl 6 makes a distinction between 
\begin_inset Quotes eld
\end_inset

statements
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

expressions
\begin_inset Quotes erd
\end_inset

.
 Expressions in Perl 6 are statements that return a value.
 A program in Perl 6 semantically represents a list of statements (things
 for the computer to do).
 To make a statement act as an expression, the 
\family typewriter
do
\family default
 keyword can be used, which will cause the statement given to represent
 its value in the given context.
 Perl 6 generally evaluates statements in the order in which they are presented
 in the program (following the natural control flow), although internally
 it will divide up statements to be run concurrently in multiple threads
 if the result is the same 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
4.
 Type coercion
\end_layout

\begin_layout Standard
By default, Perl 6 when encountering a variable that does not have a specified
 type will convert it to the necessary type when it is used in a context
 where its current type is not applicable.
 To override this behavior, types can be specified for each object, allowing
 strict type checking.
 When a specific type is requested for a variable, assignments to that variable
 will not be coerced, and explicit casting is required 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
5.
 Semantics of assignment statements
\end_layout

\begin_layout Standard
Perl 6 has complex assignment semantics, similar to Java, because it uses
 containers for some values, but values can also exist without containers.
 Containers are object-oriented wrappers around the native (native to the
 Perl 6 virtual machine) types.
 The documentation writes that 
\begin_inset Quotes eld
\end_inset

The assignment operator asks the container on the left to store the value
 on its right
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
 Because of this, the actual effect of assigning a value to a name depends
 on the type of container that has been created by variable declaration.
 In practice, this is largely transparent to the user, and the context of
 a reference to a variable will affect whether the container is used or
 the value within the container is used.
 If the user wants control over this, the language provides some constructs
 for controlling these issues 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

, but in my experience the defaults have generally worked well.
\end_layout

\begin_layout Standard
A list can contain containers or values.
 Because of this, it is not always possible to assign to list elements,
 because lists are immutable and values cannot be changed.
 However, if the items in a list are containers, they can be changed because
 the container itself will stay the same.
 That is because the containers themselves do not change; rather, what they
 point to changes.
 Unlike lists, arrays only hold containers.
 Consequently, their contents can be changed 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
\end_layout

\begin_layout Part*
Part 5: Control constructs and subprograms
\end_layout

\begin_layout Subsection*
Control flow constructs in Perl 6
\end_layout

\begin_layout Standard
Perl 6 control flow takes the form of statements.
 Statements can be grouped into blocks using braces.
 A block can be treated as a statement, used alone on a logical line, in
 which case it will be executed, or it can be used as a literal anonymous
 subprogram.
 Keywords can be used to guide a program's control flow.
 In contexts where it would usually be treated as a literal, it can be prefaced
 with the 
\family typewriter
do
\family default
 keyword to execute it instead.
 For conditional branching, 
\family typewriter
if
\family default
 can be used instead, which uses a condition to determine whether to execute
 a given block.
 Along with 
\family typewriter
if
\family default
, 
\family typewriter
else
\family default
 and 
\family typewriter
elsif
\family default
 can be used to select other blocks to execute.
 There is also 
\family typewriter
unless
\family default
, which acts similar to 
\family typewriter
if
\family default
 with the condition inverted.
 For testing 
\begin_inset Quotes eld
\end_inset

definedness rather than truth
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

, the 
\family typewriter
with
\family default
, 
\family typewriter
orwith
\family default
, and 
\family typewriter
without
\family default
 statements can be used, corresponding to the 
\family typewriter
if
\family default
, 
\family typewriter
elsif
\family default
, and 
\family typewriter
unless
\family default
 statements, respectively.
 
\family typewriter
when
\family default
 is similar to 
\family typewriter
if
\family default
, but exits the enclosing block, and does not resume with it after the selected
 block finishes.
 With the 
\family typewriter
when
\family default
 keyword, the 
\family typewriter
default
\family default
 keyword can be used to construct multi-way branches similar to a C switch
 statement.
 This is often done using the 
\family typewriter
given
\family default
 statement, which can be used to select a topic variable for 
\family typewriter
when
\family default
 and 
\family typewriter
default
\family default
 statements.
 Using 
\family typewriter
proceed
\family default
 and 
\family typewriter
succeed
\family default
 statements, the behavior of 
\family typewriter
when
\family default
 and 
\family typewriter
default
\family default
 blocks can be controlled.
 For iteration, 
\family typewriter
loop
\family default
 provides simple incremental or infinite looping, and 
\family typewriter
while
\family default
 and 
\family typewriter
until
\family default
 keywords can be used for other types of looping; the 
\family typewriter
for
\family default
 keyword is also available for iterating over lists.
 Within a 
\begin_inset Quotes eld
\end_inset

loop or recursive routine
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

, the 
\family typewriter
once
\family default
 keyword can be used to specify that a subblock of the loop body should
 only be executed once.
 The 
\family typewriter
next
\family default
, 
\family typewriter
last
\family default
, and 
\family typewriter
redo
\family default
 keywords can be used to continue the loop without finishing the current
 iteration, to leave the loop without finishing the current iteration, and
 to start the current iteration of the loop body again.
 To return from a block, the 
\family typewriter
return
\family default
 or 
\family typewriter
return-rw
\family default
 keywords can be used (
\family typewriter
return-rw
\family default
 gives a mutable result).
 Within a block, the 
\family typewriter
fail
\family default
 keyword can be used to throw an exception.
 Additionally, 
\begin_inset Quotes eld
\end_inset

phasers
\begin_inset Quotes erd
\end_inset

 can be used to restrict execution of subsets of a program to certain contexts,
 such as the 
\family typewriter
CATCH
\family default
 phaser for when an exception is thrown, or various phasers for important
 points within a program such as entering and leaving blocks.
 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset


\end_layout

\begin_layout Subsection*
Subprograms in Perl 6
\end_layout

\begin_layout Standard
In Perl 6, subprograms are declared using the 
\family typewriter
sub
\family default
 keyword.
 For anonymous functions, a literal inline block is more concise in some
 contexts.
 To indicate that multiple dispatch should be allowed for a named subprogram,
 it must be declared with the 
\family typewriter
multi
\family default
 keyword.
 The 
\family typewriter
proto
\family default
 keyword can be used to specify a template for type signatures that all
 the 
\family typewriter
multi
\family default
 subprograms sharing that name must match.
 Subprograms can be used as operators, or as 
\emph on
traits
\emph default
, which 
\begin_inset Quotes eld
\end_inset

modify the behavior of a ...
 language object
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
 Perl 6 also provides tools for re-dispatching, which is giving another
 subprogram the same arguments the current one was called with.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "2017sept20-p6bib"
options "ieeetr"

\end_inset


\end_layout

\begin_layout Section*
Part 3 Appendix: Tables â€” after 
\begin_inset CommandInset citation
LatexCommand citealp
key "Documentation"

\end_inset

 
\end_layout

\begin_layout Subsection*
Sigils
\end_layout

\begin_layout Standard

\size scriptsize
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="20line%">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Sigil
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Type constraint
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Default type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Assignment
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
$
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Mu
\family default
 (no constraint)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
item
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
@
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Positional
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Array
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
%
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Associative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Hash
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
list
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
&
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Callable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Callable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
item
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
none (declared with 
\family typewriter

\backslash

\family default
)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(does not create containers or enforce context)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Declarators
\end_layout

\begin_layout Standard

\size scriptsize
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="30line%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Declarator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Effect
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
my
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Introduces lexically scoped names
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
our
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Introduces package-scoped names
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
has
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Introduces attribute names
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
anon
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Introduces names that are private to the construct
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
state
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Introduces lexically scoped but persistent names
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
augment
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Adds definitions to an existing name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
supersede
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Replaces definitions of an existing name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
temp
\family default
 (prefix: not a declarator)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Restores a variable's value at the end of scope
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
let
\family default
 (prefix: not a declarator)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Restores a variable's value at the end of scope if the block exits unsuccessfull
y
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Twigils
\end_layout

\begin_layout Standard

\size scriptsize
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Twigil
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Scope
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(none)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Based only on declarator
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Dynamic
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
!
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Attribute (class member)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Compile-time variable
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Method (not really a variable)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
<
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Index into match object (not really a variable)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
^
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Self-declared formal positional parameter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Self-declared formal named parameter
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
=
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Pod variables
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
~
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
The sublanguage seen by the parser at this lexical spot
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Built-in types
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="48" columns="3">
<features rotate="0" islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Category
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
AST
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Abstract representation of a piece of source code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Any
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Thing/object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Block
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Code object with its own lexical scope
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
enum
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Logical boolean
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
CallFrame
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Capturing current frame state
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
role
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Callable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Invocable code object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Code object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Complex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Complex number
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
ComplexStr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Dual Value Complex number and String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Cool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Object that can be treated as both a string and number
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Calendar date
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
DateTime
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Calendar date with time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
role
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Dateish
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Object that can be treated as a date
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Duration
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Length of time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
FatRat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Rational number (arbitrary-precision)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Instant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Specific moment in time
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Integer (arbitrary-precision)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
IntStr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Dual Value Integer and String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Junction
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Logical superposition of values
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Label
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Tagged location in the source code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Macro
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Compile-time routine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Member function
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Mu
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
The root of the Perl 6 type hierarchy.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Nil
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Absence of a value or a benign failure
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Num
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Floating-point number
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
NumStr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Dual Value Floating-point number and String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
role
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Numeric
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Number or object that can act as a number
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
ObjAt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Unique identification for an object
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Parameter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Element of a signature
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Proxy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Item container with custom storage and retrieval
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Rat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Rational number (limited-precision)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
RatStr
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Dual Value Rational number and String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
role
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Rational
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Number stored as numerator and denominator
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
role
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Real
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Non-complex number
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Routine
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Code object with its own lexical scope and `return` handling
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Scalar
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
A mostly transparent container used for indirections
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Signature
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Parameter list pattern
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Str
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
String of characters
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
role
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Stringy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
String or object that can act as a string
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Sub
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Subroutine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Submethod
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Member function that is not inherited by subclasses
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Variable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Object representation of a variable for use in traits
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Module version descriptor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Whatever
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Placeholder for an unspecified value/argument
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
WhateverCode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Code object constructed by Whatever-currying
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
atomicint
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Integer (native storage at the platform's atomic operation size)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Integer (native storage; machine precision)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Levels of precedence
\end_layout

\begin_layout Standard

\size scriptsize
\begin_inset Tabular
<lyxtabular version="3" rows="28" columns="3">
<features rotate="0" islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="30line%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Associativity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Level of precedence
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\size small
Examples
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
N
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Terms 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
42 3.14 "eek" qq["foo"] $x :!verbose @$array
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
L
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Method postfix 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
.meth .+ .? .* .() .[] .{} .<> .Â«Â» .:: .= .^ .:
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
N
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Autoincrement 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
++ --
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Exponentiation 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
**
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
L
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Symbolic unary 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
! + - ~ ? | || +^ ~^ ?^ ^
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
L
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Dotty infix 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
.= .
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
L
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Multiplicative 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
* / % %% +& +< +> ~& ~< ~> ?& div mod gcd lcm
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
L
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Additive 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
+ - +| +^ ~| ~^ ?| ?^
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
L
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Replication 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
x xx
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Concatenation 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
~
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Junctive and 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
&
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Junctive or 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
| ^
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
L
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Named unary 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
temp let
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
N
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Structural infix 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
but does <=> leg cmp ..
 ..^ ^..
 ^..^
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Chaining infix 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
!= == < <= > >= eq ne lt le gt ge ~~ === eqv !eqv =~=
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Tight and 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
&&
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Tight or 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
|| ^^ // min max
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Conditional 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
?? !! ff fff
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Item assignment 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
= => += -= **= xx=
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
L
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Loose unary 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
so not
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Comma operator 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
, :
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
List infix 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
Z minmax X X~ X* Xeqv ...
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
R
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
List prefix 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
print push say die map substr ...
 [+] [*] any Z=
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Loose and 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
and andthen notandthen
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Loose or 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
or xor orelse
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Sequencer 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
<==, ==>, <<==, ==>>
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
N
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
Terminator 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
; {...}, unless, extra ), ], }
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section*
Part 4 Appendix
\end_layout

\begin_layout Standard
The appendices are not included here due to length.
 Tables of the composite types, domain-specific types, and exception types
 are available in the Perl 6 documentation 
\begin_inset CommandInset citation
LatexCommand citep
key "Documentation"

\end_inset

.
 A list of modules included with Rakudo Star is available on request from
 this author, based on the information from 
\begin_inset CommandInset citation
LatexCommand cite
key "New1"

\end_inset

.
\end_layout

\end_body
\end_document
